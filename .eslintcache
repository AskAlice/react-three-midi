[{"C:\\Users\\alice\\midi3d\\src\\index.tsx":"1","C:\\Users\\alice\\midi3d\\src\\reportWebVitals.js":"2","C:\\Users\\alice\\midi3d\\src\\App.jsx":"3","C:\\Users\\alice\\midi3d\\src\\Midi.jsx":"4","C:\\Users\\alice\\midi3d\\src\\Rig.jsx":"5","C:\\Users\\alice\\midi3d\\src\\Scene.jsx":"6","C:\\Users\\alice\\midi3d\\src\\Effects.jsx":"7","C:\\Users\\alice\\midi3d\\src\\Terrain.jsx":"8","C:\\Users\\alice\\midi3d\\src\\perlin.js":"9","C:\\Users\\alice\\midi3d\\src\\Glitchpass.js":"10","C:\\Users\\alice\\midi3d\\src\\util\\hslToHex.js":"11","C:\\Users\\alice\\midi3d\\src\\Weaver.jsx":"12","C:\\Users\\alice\\midi3d\\src\\Crystal.jsx":"13"},{"size":500,"mtime":1609123818516,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":2421,"mtime":1610117502156,"results":"17","hashOfConfig":"15"},{"size":5374,"mtime":1610115538599,"results":"18","hashOfConfig":"15"},{"size":2626,"mtime":1610077060215,"results":"19","hashOfConfig":"15"},{"size":7911,"mtime":1610115607370,"results":"20","hashOfConfig":"15"},{"size":2330,"mtime":1610110257344,"results":"21","hashOfConfig":"15"},{"size":4067,"mtime":1610117129087,"results":"22","hashOfConfig":"15"},{"size":10438,"mtime":1610081054232,"results":"23","hashOfConfig":"15"},{"size":5269,"mtime":1610092579557,"results":"24","hashOfConfig":"15"},{"size":846,"mtime":1610092767815,"results":"25","hashOfConfig":"15"},{"size":2871,"mtime":1610095955401,"results":"26","hashOfConfig":"15"},{"size":1415,"mtime":1610117525610,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1p3ebon",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\alice\\midi3d\\src\\index.tsx",[],["64","65"],"C:\\Users\\alice\\midi3d\\src\\reportWebVitals.js",[],["66","67"],"C:\\Users\\alice\\midi3d\\src\\App.jsx",["68","69","70"],"import './App.css';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport React, { useRef, useState, Suspense } from 'react';\nimport Midi from './Midi';\nimport { draco, Stats, Stars,Html } from 'drei';\nimport Model from './Scene';\nimport Effects from './Effects';\nimport Terrain from './Terrain'\nimport Crystal from './Crystal'\n// import Weaver from './Weaver'\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n  });\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}\n    >\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  );\n}\n\nfunction App() {\n  return (\n    <>\n      <Canvas camera={{ position: [0, 0, 8] }} shadowMap>\n        <ambientLight />\n        <Stats\n        showPanel={0} // Start-up panel (default=0)\n        className=\"stats\" // Optional className to add to the stats container dom element\n      />\n      <Suspense>\n        <Midi />\n        <Suspense fallback={<Html><h2>Loading</h2></Html>}>\n          <Effects />\n          <group scale={[0.15,0.15,0.15]}>\n          {/* <Weaver /> */}\n          </group>\n          <Model position={[-10, 0, 0]} rotation={[0, 0, 0]} />\n          <Terrain />\n          <Crystal position={[150,0,-120]} scale={[0.5,0.5,0.5]}/>\n          <Crystal position={[-30,0,-40]} scale={[0.5,0.5,0.5]}/>\n          <Crystal position={[85,0,-260]} scale={[0.5,0.5,0.5]}/>\n          <Crystal position={[150,0, 680]} scale={[0.5,0.5,0.5]}/>\n          <Crystal position={[-100,0, 560]} scale={[0.5,0.5,0.5]}/>\n          <Crystal position={[-64,0, 460]} scale={[0.5,0.5,0.5]}/>\n          <Crystal position={[-80,0, 160]} scale={[0.5,0.5,0.5]}/>\n          <Crystal position={[54,0, 380]} scale={[0.5,0.5,0.5]}/>\n        </Suspense>\n        </Suspense>\n        <pointLight position={[10, 10, 10]} />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\alice\\midi3d\\src\\Midi.jsx",["71","72","73","74","75","76","77","78","79","80","81","82","83"],"import React, {useState, useEffect, useRef} from 'react';\nimport {useFrame} from 'react-three-fiber';\nimport { Html } from 'drei';\nimport MidiFile from 'midifile';\nimport MidiEvents from 'midievents';\nimport  drums from './drums.mid';\nimport tesselated from './tesselated.mp3';\n\nfunction objectArrayToKeyPairs(obj)\n{\n    const result = {};\n    Object.keys(obj).forEach((k) => {\n    if (typeof obj[k] === \"object\" && obj[k] !== null){\n      if(!Array.isArray(obj[k]))\n        result[k] = obj[k];\n        else\n          result[k] = obj[k].reduce((o, item) => ({...o, [Number(item.playTime)]: item}) ,{});\n        result[k] =  objectArrayToKeyPairs(result[k]);\n    }\n    else {\n          result[k] = obj[k];\n      }\n    })\n    return result;\n}\n\n\nfunction getBuffer( url, success, error ) {\n    const xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function( e ) {\n        if ( xhr.readyState == 4 ) {\n            if ( xhr.status == 200 ) {\n                return success( e.currentTarget.response );\n            }\n            if ( error ) {\n                return error( `${xhr.status  } ${  xhr.statusText}` );\n            }\n            throw `${xhr.status  } ${  xhr.statusText}`;\n        }\n    };\n    xhr.open( 'GET', url, true );\n    xhr.responseType = 'arraybuffer';\n    xhr.send( null );\n}\n\nfunction checkForMidiAction(midi,elapsedMs,type,subtype,note,threshold=100){\n    const midiEvents = midi.getEvents();\n    if(typeof note !== undefined)\n    return midiEvents.filter(event => event.type === type && event.playTime <= elapsedMs && event.playTime >= elapsedMs-(threshold) && event.subtype === subtype && event.param1 === note);\n    else\n    return midiEvents.filter(event => event.playTime <= elapsedMs && event.playTime >= elapsedMs-(threshold) && event.subtype === subtype && event.type === type );\n}\n\nfunction useMidiAction({type,subtype,note},callback,fallback) {\n    const midi = window.currentMidi;\n    const midiEvents = midi?.getEvents() || [];\n    const aud = window.currentAudio;\n    const startTime = window.audioStartTime;\n    const events = useRef([]);\n    const prevTime = useRef(0);\n    const prevEvents = useRef();\n    useFrame((state,delta)=>{\n        const elapsedMs = (aud?.currentTime*1000)+300;\n        // console.log(audio?.currentTime*1000,Date.now()-startTime, elapsedMs, elapsedMs-audio?.currentTime*1000)\n        // console.log(elapsedMs);\n        prevEvents.current = events?.current;\n        if(midiEvents.length){\n            events.current = objectArrayToKeyPairs(checkForMidiAction(midi,elapsedMs,type,subtype, note,(elapsedMs-prevTime.current)));\n            let called = false;\n            if(Object.keys(events?.current).length){\n                Object.keys(events.current).forEach((i)=>{\n                    const event = events.current[i];\n                    const prev = prevEvents.current[i];\n                    if(typeof prev === 'undefined')\n                    {\n                        // console.log(\"noteOff\", elapsedMs, event.param1, event)\n                        called = true;\n                    }\n                })\n                if(called)\n                callback({elapsedMs,delta:(elapsedMs-prevTime.current)});\n            }\n            if(!called && typeof fallback === 'function')\n                fallback({elapsedMs,delta:(elapsedMs-prevTime.current)});\n        }\n        prevTime.current = elapsedMs;\n    });\n    return null;\n}\nconst Midi = () => {\n    const [midi,setMidi] = useState();\n    const aud = React.createRef();\n    const start = useRef();\n    const prevTime = useRef(0);\n    const events = useRef();\n    const prevEvents = useRef();\n    useEffect(()=>{\n    const startTime = start?.current;\n      getBuffer(drums,(b)=>{\n        const file = new MidiFile(b);\n        console.log(file);\n        const desiredBPM = 174;\n        const ticksPerBeat = file.header.getTicksPerBeat(); // 96 is default (aka 120bpm)\n        const defaultBPM = 120;\n        file.header.setTicksPerBeat((ticksPerBeat*desiredBPM)/defaultBPM); // 139.2 if 174 is bpm\n        setMidi(file);\n        window.currentMidi = file;\n      },()=>{})\n    },[]);\n    useEffect(()=>{\n            window.currentAudio = new Audio(tesselated);\n            aud.current = window.currentAudio;\n            window.audioAnalyzerData = {};\n            window.audioAnalyzerData.audioCtx = new window.AudioContext();\n            window.audioAnalyzerData.analyzer = window.audioAnalyzerData.audioCtx.createAnalyser();\n            window.audioAnalyzerData.analyzer.fftSize = 2048;\n            window.audioAnalyzerData.bufferLength = window.audioAnalyzerData.analyzer.frequencyBinCount;\n            window.audioAnalyzerData.dataArray = new Uint8Array(window.audioAnalyzerData.bufferLength);\n            window.audioAnalyzerData.analyzer.getByteTimeDomainData(window.audioAnalyzerData.dataArray);\n            window.audioAnalyzerData.source = window.audioAnalyzerData.audioCtx.createMediaElementSource(aud?.current); \n            window.audioAnalyzerData.source.connect(window.audioAnalyzerData.analyzer);\n            window.audioAnalyzerData.analyzer.connect(window.audioAnalyzerData.audioCtx.destination);\n            aud.current.play();\n            window.audioStartTime = Date.now();\n            return () =>{\n                aud.current.pause();\n            }\n    },[])\n    return (<></>);\n}\n\nexport default Midi;\nexport {useMidiAction};","C:\\Users\\alice\\midi3d\\src\\Rig.jsx",["84","85","86","87","88"],"C:\\Users\\alice\\midi3d\\src\\Scene.jsx",["89","90"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: patrix (https://sketchfab.com/patrix)\nlicense: CC-BY-NC-SA-4.0 (http://creativecommons.org/licenses/by-nc-sa/4.0/)\nsource: https://sketchfab.com/3d-models/sci-fi-girl-v02-walkcycle-test-07ac452d75cc47969234b224422ea85d\ntitle: Sci-fi Girl v.02 Walkcycle Test\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef, useState, useEffect } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { useAnimations } from '@react-three/drei/useAnimations'\nimport {useMidiAction} from './Midi'\nimport {hslToHex} from './util/hslToHex'\nimport {Stars} from 'drei'\n\nexport default function Model(props) {\n  const group = useRef()\n  const stars = useRef()\n  const color = useRef(hslToHex((new Date()%360),100,50));\n  const { nodes, materials, animations } = useGLTF('/assets/scifi/scene.gltf')\n  const { actions } = useAnimations(animations, group)\n  console.log(actions)\n  const {camera} = useThree();\n  useEffect(()=>{\n    Object.keys(materials).forEach(mat => {\n      if(mat !== \"cloth_mat\")\n        materials[mat].wireframe = true;\n      else\n        materials[mat].opacity=0.95;\n    })\n    actions[Object.keys(actions)[0]]?.play();\n  })\n  useMidiAction({type:8,subtype:8,note: 40},()=>{\n    const col = new THREE.Color(hslToHex((new Date()/10%360),100,50));\n    materials.cloth_mat.color.r = col.r;\n    materials.cloth_mat.color.g = col.g;\n    materials.cloth_mat.color.b = col.b;\n  })\n  useMidiAction({type:8,subtype:8,note: 36},()=>{\n    // camera.position.z = group.current.position.z+25;\n    const col = new THREE.Color(hslToHex((45-(new Date()/10)%360),100,50));\n    materials.body_mat.color.r = col.r;\n    materials.body_mat.color.g = col.g;\n    materials.body_mat.color.b = col.b;\n  })\n  useMidiAction({type:8,subtype:8,note: 41},()=>{\n    const col = new THREE.Color(hslToHex((90-(new Date()/10)%360),100,50));\n    materials.hair_outer_mat.color.r = col.r;\n    materials.hair_outer_mat.color.g = col.g;\n    materials.hair_outer_mat.color.b = col.b;\n    const col2 = new THREE.Color(hslToHex((120-(new Date()/10)%360),100,50));\n    materials.hair_inner_mat.color.r = col2.r;\n    materials.hair_inner_mat.color.g = col2.g;\n    materials.hair_inner_mat.color.b = col2.b;\n  })\n  useFrame((state,delta)=>{\n    // console.log(state);\n    const {camera} = state;\n    // console.log();\n    if(actions[Object.keys(actions)[0]]?.time <1.2916666269302368){\n      actions[Object.keys(actions)[0]]?.getMixer().setTime(1.2916666269302369);\n    }\n    if(group?.current){\n      const target = new THREE.Vector3(group.current.position.x, group.current.position.y+13,group.current.position.z)\n      camera.controls.target = target;\n      group.current.position.z +=0.1;\n\n      const pos = new THREE.Vector3(group.current.position.x,group.current.position.y+10,group.current.position.z);\n      camera.lookAt(pos)\n      // console.log(camera);\n      // console.log(group.current);\n      // console.log(nodes.modelteeth_upper_body_mat_0.geometry);\n      // console.log(materials.cloth_mat);\n      // console.log(group.current.children[0].children[0])\n      // console.log(window.audioAnalyzerData.dataArray)\n\n      //  dataArray[512] / 128.0,dataArray[768] / 128.0);\n    }\n    if(stars?.current){\n      stars.current.position.y = 3*Math.sin(new Date()/6000);\n    }\n  })\n  return (\n    <group ref={group} {...props} dispose={null} >\n      <group rotation={[-Math.PI / 2, 0, 0]}>\n        <group rotation={[Math.PI / 2, 0, 0]}>\n          <mesh\n            name=\"0\"\n            material={materials.cloth_mat}\n            geometry={nodes['0'].geometry}\n            morphTargetDictionary={nodes['0'].morphTargetDictionary}\n            material-color={color?.current}\n            morphTargetInfluences={nodes['0'].morphTargetInfluences}\n          />\n          <primitive object={nodes._rootJoint} />\n          <skinnedMesh\n            material={materials.body_mat}\n            geometry={nodes.modelbody_body_mat_0.geometry}\n            skeleton={nodes.modelbody_body_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.body_mat}\n            geometry={nodes.modelteeth_upper_body_mat_0.geometry}\n            skeleton={nodes.modelteeth_upper_body_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.body_mat}\n            geometry={nodes.modelteeth_lower_body_mat_0.geometry}\n            skeleton={nodes.modelteeth_lower_body_mat_0.skeleton}\n          />\n          <skinnedMesh\n          wireframe={true}\n            material={materials.body_mat}\n            geometry={nodes.modeltongue_body_mat_0.geometry}\n            skeleton={nodes.modeltongue_body_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.eyes_outer_mat}\n            geometry={nodes.modeleyes_R_outer_eyes_outer_mat_0.geometry}\n            skeleton={nodes.modeleyes_R_outer_eyes_outer_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.eyes_inner_mat}\n            geometry={nodes.modeleyes_R_inner_eyes_inner_mat_0.geometry}\n            skeleton={nodes.modeleyes_R_inner_eyes_inner_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.eyes_outer_mat}\n            geometry={nodes.modeleyes_L_outer_eyes_outer_mat_0.geometry}\n            skeleton={nodes.modeleyes_L_outer_eyes_outer_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.eyes_inner_mat}\n            geometry={nodes.modeleyes_L_inner_eyes_inner_mat_0.geometry}\n            skeleton={nodes.modeleyes_L_inner_eyes_inner_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.tear_mat}\n            geometry={nodes.modeltear_L_tear_mat_0.geometry}\n            skeleton={nodes.modeltear_L_tear_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.tear_mat}\n            geometry={nodes.modeltear_R_tear_mat_0.geometry}\n            skeleton={nodes.modeltear_R_tear_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.hair_outer_mat}\n            geometry={nodes.modelhair_outer_hair_outer_mat_0.geometry}\n            skeleton={nodes.modelhair_outer_hair_outer_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.hair_inner_mat}\n            geometry={nodes.modelhair_inner_hair_inner_mat_0.geometry}\n            skeleton={nodes.modelhair_inner_hair_inner_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.eyelash_mat}\n            geometry={nodes.modeleyelash_L_upper_eyelash_mat_0.geometry}\n            skeleton={nodes.modeleyelash_L_upper_eyelash_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.eyelash_mat}\n            geometry={nodes.modeleyelash_L_lower_eyelash_mat_0.geometry}\n            skeleton={nodes.modeleyelash_L_lower_eyelash_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.eyelash_mat}\n            geometry={nodes.modeleyelash_R_upper_eyelash_mat_0.geometry}\n            skeleton={nodes.modeleyelash_R_upper_eyelash_mat_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.eyelash_mat}\n            geometry={nodes.modeleyelash_R_lower_eyelash_mat_0.geometry}\n            skeleton={nodes.modeleyelash_R_lower_eyelash_mat_0.skeleton}\n          />\n        </group>\n      </group>\n      <group ref={stars}>\n      <Stars\n            radius={20} // Radius of the inner sphere (default=100)\n            depth={25} // Depth of area where stars should fit (default=50)\n            count={8000} // Amount of stars (default=5000)\n            factor={2} // Size factor (default=4)\n            saturation={0.5} // Saturation 0-1 (default=0)\n            fade // Faded dots (default=false)\n          />\n    </group>\n    </group>\n  )\n}\n\n\n","C:\\Users\\alice\\midi3d\\src\\Effects.jsx",["91"],"import * as THREE from 'three'\nimport React, { useRef, useEffect, useMemo } from 'react'\nimport { extend, useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass'\nimport { AfterimagePass } from 'three/examples/jsm/postprocessing/AfterimagePass'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n// import { WaterPass } from './Waterpass'\n\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass, FilmPass, AfterimagePass, FXAAShader })\nextend({ OrbitControls })\nconst ThreeControls = (props) => {\n  const { gl, camera } = useThree()\n  const ref = useRef()\n  \n  useFrame(() => {\n    ref.current.update()\n    camera.controls = ref.current\n  camera.position.y=18})\n  return <orbitControls ref={ref} args={[camera, gl.domElement]} {...props} />\n}\nexport default function Effects() {\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => composer.current.render(), 2)\n  const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), [size])\n  return (\n    <>\n      <ThreeControls\n      enablePan\n      enableZoom\n      enableDamping\n      minDistance={15}\n      maxDistance={80}\n      dampingFactor={0.5}\n        rotateSpeed={2}\n      maxPolarAngle={Math.PI*2}\n      minPolarAngle={-Math.PI*2}\n    />\n\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      {/* <waterPass attachArray=\"passes\" factor={2} /> */}\n      {/* <unrealBloomPass attachArray=\"passes\" args={[aspect, 1, 3, 0.8]} /> */}\n      {/* <afterimagePass attachArray=\"passes\" uniforms-damp-value={0.977} /> */}\n      \n      <shaderPass attachArray=\"passes\" args={[FXAAShader]} uniforms-resolution-value={[1 / size.width, 1 / size.height]} renderToScreen />\n      </effectComposer>\n    </>\n  )\n}\n","C:\\Users\\alice\\midi3d\\src\\Terrain.jsx",["92","93","94"],"import {useRef} from \"react\";\nimport { useFrame, useUpdate } from \"react-three-fiber\";\nimport {useMidiAction} from './Midi'\nimport { noise } from \"./perlin\";\nimport * as THREE from 'three';\n\nfunction updateMesh(geometry,ex,elapsedMs){\n  noise.seed((elapsedMs/10)%1);\n    let pos = geometry.getAttribute(\"position\");\n    let pa = pos.array;\n    const hVerts = geometry.parameters.heightSegments + 1;\n    const wVerts = geometry.parameters.widthSegments + 1;\n    for (let j = 0; j < hVerts; j++) {\n      for (let i = 0; i < wVerts; i++) {\n        pa[3 * (j * wVerts + i) + 2] =\n          (noise.simplex2(i+(elapsedMs/150) / 100, j+(elapsedMs/150) / 100) +\n            noise.simplex2((i+(elapsedMs/150) + 200) / 50, j+(elapsedMs/150) / 50) * Math.pow(ex, 1) +\n            noise.simplex2((i+(elapsedMs/150) + 400) / 25, j+(elapsedMs/150) / 25) * Math.pow(ex, 2) +\n            noise.simplex2((i+(elapsedMs/150) + 600) / 12.5, j+(elapsedMs/150) / 12.5) * Math.pow(ex, 3) +\n            +(noise.simplex2((i+(elapsedMs/150) + 800) / 6.25, j+(elapsedMs/150) / 6.25) * Math.pow(ex, 4))) /\n          2;\n      }\n    }\n    pos.needsUpdate = true;\n}\nconst Terrain = () => {\n  const exx = useRef(1.1); \n  const geo = useRef();\n  const noiseGeo = useRef();\n  const secondMesh = useRef(new THREE.PlaneBufferGeometry(1000,5000,200,1000));\n\n  // useFrame(()=>{\n  \n  // })\n  const noise = useUpdate(({ geometry }) => {\n    updateMesh(geometry,1.3,40);\n  });\n  const mesh = useUpdate(({ geometry }) => {\n    updateMesh(geometry,1.3,30);\n  });\n  useMidiAction({type:8,subtype:9,note: 40},()=>{\n    const geometry = geo.current;\n    const elapsedMs = window.currentAudio.currentTime;\n    updateMesh(geometry,1.7,elapsedMs);\n  },()=>{});\n  //   const geometry = geo.current;\n  //   const elapsedMs = document.getElementById(\"audioPlayer\").currentTime;\n\n  //   Math.sin(elapsedMs);\n  //   let pos = geometry.getAttribute(\"position\");\n  //   let pa = pos.array;\n  //   const hVerts = geometry.parameters.heightSegments + 1;\n  //   const wVerts = geometry.parameters.widthSegments + 1;\n  //   for (let j = 0; j < hVerts; j+=2) {\n  //     for (let i = 0; i < wVerts; i+=2) {\n  //       pa[3 * (j * wVerts + i) + 2] += 0.15*Math.sin(elapsedMs*5);\n  //     }\n  //   }\n  //   for (let j = 1; j < hVerts; j+=2) {\n  //     for (let i = 1; i < wVerts; i+=2) {\n  //       pa[3 * (j * wVerts + i) + 2] += 0.15*Math.cos(elapsedMs*5);\n  //     }\n  //   }\n  //   pos.needsUpdate = true;\n  //   //  mesh.current.rotation.z += 0.001;\n  // });\n  // Raf loop\n  useFrame(() => {\n    const geometry = geo.current;\n    const noiseGeometry = noiseGeo.current;\n    window.audioAnalyzerData.analyzer.getByteFrequencyData(window.audioAnalyzerData.dataArray);\n    let pos = geometry.getAttribute(\"position\");\n    let pa = pos.array;\n    let noisePos = noiseGeometry.getAttribute(\"position\");\n    let noisePa = noisePos.array;\n    const hVerts = geometry.parameters.heightSegments + 1;\n    const wVerts = geometry.parameters.widthSegments + 1;\n    for (let j = 0; j < hVerts; j+=3) {\n      for (let i = 0; i < wVerts; i+=3) {\n        pa[3 * (j * wVerts + i) + 2] = noisePa[3 * (j * wVerts + i) + 2] + window.audioAnalyzerData.dataArray[i] / 30.0;\n      }\n    }\n    pos.needsUpdate = true;\n    noisePos.needsUpdate = true;\n   \n    // group.current.children[0].children[0].children[12].scale.x = dataArray[256]/128.0\n    // group.current.children[0].children[0].children[11].scale.x = dataArray[256]/50\n    // group.current.children[0].children[0].children[9].scale.x = dataArray[512]/50\n  });\n\n  return (\n    <group>\n      \n      <planeBufferGeometry attach=\"geometry\"  ref={noiseGeo} args={[1000,5000,200,1000]} />\n\n      <mesh ref={mesh} rotation={[-Math.PI / 2, 0, 0]}>\n        <planeBufferGeometry attach=\"geometry\" ref={geo} args={[1000,5000,200,1000]} />\n        <meshBasicMaterial\n          attach=\"material\"\n          wireframe={true}\n          color={\"hotpink\"}\n          specular={\"hotpink\"}\n          shininess={3}\n          flatShading\n          />\n      </mesh>\n    </group>\n  );\n};\n\nexport default Terrain;\n","C:\\Users\\alice\\midi3d\\src\\perlin.js",[],"C:\\Users\\alice\\midi3d\\src\\Glitchpass.js",[],["95","96"],"C:\\Users\\alice\\midi3d\\src\\util\\hslToHex.js",[],["97","98"],"C:\\Users\\alice\\midi3d\\src\\Weaver.jsx",["99","100"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: zetxune (https://sketchfab.com/zetxune)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/3d-models/the-weaver-v2-rigged-553ea1808c8346e8ac90f04285c63e54\ntitle: \"The Weaver\" (V2, Rigged)\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef, useState, useEffect } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { useGLTF } from '@react-three/drei/useGLTF'\n\nimport { useAnimations } from '@react-three/drei/useAnimations'\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF('/assets/weaver/scene.gltf')\n  const { actions } = useAnimations(animations, group)\n  console.log(actions);\n  useEffect(()=>{\n    actions[Object.keys(actions)[0]]?.setDuration(10);\n    actions[Object.keys(actions)[0]]?.play();\n  })\n  useFrame(()=>{\n    if(group?.current){\n      group.current.position.z += 0.1/0.15;\n    }\n  });\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-Math.PI / 2, 0, 0]}>\n        <group rotation={[Math.PI / 2, 0, 0]}>\n          <primitive object={nodes._rootJoint} />\n          <group position={[0, -2.13, 4.48]} scale={[25.28, 25.28, 25.28]} />\n          <skinnedMesh\n            material={materials.weapons_material}\n            geometry={nodes.bat_weapons_material_0.geometry}\n            skeleton={nodes.bat_weapons_material_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.weaver_material}\n            geometry={nodes.holster_bat_weaver_material_0.geometry}\n            skeleton={nodes.holster_bat_weaver_material_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.weaver_material}\n            geometry={nodes.lefteye_weaver_material_0.geometry}\n            skeleton={nodes.lefteye_weaver_material_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.weaver_material}\n            geometry={nodes.righteye_weaver_material_0.geometry}\n            skeleton={nodes.righteye_weaver_material_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.weaver_material}\n            geometry={nodes.weaver_weaver_material_0.geometry}\n            skeleton={nodes.weaver_weaver_material_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.weaver_material}\n            geometry={nodes.weaver_ponytail_weaver_material_0.geometry}\n            skeleton={nodes.weaver_ponytail_weaver_material_0.skeleton}\n          />\n          <skinnedMesh\n            material={materials.powers}\n            geometry={nodes.powers_effect_powers_0.geometry}\n            skeleton={nodes.powers_effect_powers_0.skeleton}\n          />\n        </group>\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/assets/weaver/scene.gltf')\n","C:\\Users\\alice\\midi3d\\src\\Crystal.jsx",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":5,"column":10,"nodeType":"107","messageId":"108","endLine":5,"endColumn":15},{"ruleId":"105","severity":1,"message":"109","line":5,"column":24,"nodeType":"107","messageId":"108","endLine":5,"endColumn":29},{"ruleId":"105","severity":1,"message":"110","line":11,"column":10,"nodeType":"107","messageId":"108","endLine":11,"endColumn":13},{"ruleId":"105","severity":1,"message":"111","line":3,"column":10,"nodeType":"107","messageId":"108","endLine":3,"endColumn":14},{"ruleId":"105","severity":1,"message":"112","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":31,"column":29,"nodeType":"115","messageId":"116","endLine":31,"endColumn":31},{"ruleId":"113","severity":1,"message":"114","line":32,"column":29,"nodeType":"115","messageId":"116","endLine":32,"endColumn":31},{"ruleId":"117","severity":1,"message":"118","line":38,"column":13,"nodeType":"119","messageId":"120","endLine":38,"endColumn":57},{"ruleId":"105","severity":1,"message":"121","line":58,"column":11,"nodeType":"107","messageId":"108","endLine":58,"endColumn":20},{"ruleId":"105","severity":1,"message":"122","line":72,"column":27,"nodeType":"107","messageId":"108","endLine":72,"endColumn":32},{"ruleId":"105","severity":1,"message":"123","line":91,"column":12,"nodeType":"107","messageId":"108","endLine":91,"endColumn":16},{"ruleId":"105","severity":1,"message":"124","line":94,"column":11,"nodeType":"107","messageId":"108","endLine":94,"endColumn":19},{"ruleId":"105","severity":1,"message":"125","line":95,"column":11,"nodeType":"107","messageId":"108","endLine":95,"endColumn":17},{"ruleId":"105","severity":1,"message":"126","line":96,"column":11,"nodeType":"107","messageId":"108","endLine":96,"endColumn":21},{"ruleId":"105","severity":1,"message":"121","line":98,"column":11,"nodeType":"107","messageId":"108","endLine":98,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":128,"column":7,"nodeType":"129","endLine":128,"endColumn":9,"suggestions":"130"},{"ruleId":"105","severity":1,"message":"131","line":9,"column":13,"nodeType":"107","messageId":"108","endLine":9,"endColumn":18},{"ruleId":"105","severity":1,"message":"132","line":10,"column":25,"nodeType":"107","messageId":"108","endLine":10,"endColumn":33},{"ruleId":"105","severity":1,"message":"133","line":10,"column":35,"nodeType":"107","messageId":"108","endLine":10,"endColumn":44},{"ruleId":"105","severity":1,"message":"134","line":11,"column":10,"nodeType":"107","messageId":"108","endLine":11,"endColumn":18},{"ruleId":"105","severity":1,"message":"135","line":19,"column":11,"nodeType":"107","messageId":"108","endLine":19,"endColumn":18},{"ruleId":"105","severity":1,"message":"132","line":10,"column":25,"nodeType":"107","messageId":"108","endLine":10,"endColumn":33},{"ruleId":"105","severity":1,"message":"136","line":25,"column":10,"nodeType":"107","messageId":"108","endLine":25,"endColumn":16},{"ruleId":"105","severity":1,"message":"137","line":31,"column":9,"nodeType":"107","messageId":"108","endLine":31,"endColumn":15},{"ruleId":"105","severity":1,"message":"138","line":27,"column":9,"nodeType":"107","messageId":"108","endLine":27,"endColumn":12},{"ruleId":"105","severity":1,"message":"139","line":30,"column":9,"nodeType":"107","messageId":"108","endLine":30,"endColumn":19},{"ruleId":"105","severity":1,"message":"140","line":35,"column":9,"nodeType":"107","messageId":"108","endLine":35,"endColumn":14},{"ruleId":"101","replacedBy":"141"},{"ruleId":"103","replacedBy":"142"},{"ruleId":"101","replacedBy":"143"},{"ruleId":"103","replacedBy":"144"},{"ruleId":"105","severity":1,"message":"131","line":9,"column":13,"nodeType":"107","messageId":"108","endLine":9,"endColumn":18},{"ruleId":"105","severity":1,"message":"132","line":10,"column":25,"nodeType":"107","messageId":"108","endLine":10,"endColumn":33},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'draco' is defined but never used.","Identifier","unusedVar","'Stars' is defined but never used.","'Box' is defined but never used.","'Html' is defined but never used.","'MidiEvents' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'startTime' is assigned a value but never used.","'event' is assigned a value but never used.","'midi' is assigned a value but never used.","'prevTime' is assigned a value but never used.","'events' is assigned a value but never used.","'prevEvents' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'aud'. Either include it or remove the dependency array.","ArrayExpression",["147"],"'THREE' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useFrame' is defined but never used.","'actions' is assigned a value but never used.","'camera' is assigned a value but never used.","'aspect' is assigned a value but never used.","'exx' is assigned a value but never used.","'secondMesh' is assigned a value but never used.","'noise' is assigned a value but never used.",["145"],["146"],["145"],["146"],"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},"Update the dependencies array to be: [aud]",{"range":"150","text":"151"},[5303,5305],"[aud]"]