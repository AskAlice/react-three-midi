/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: patrix (https://sketchfab.com/patrix)
license: CC-BY-NC-SA-4.0 (http://creativecommons.org/licenses/by-nc-sa/4.0/)
source: https://sketchfab.com/3d-models/sci-fi-girl-v02-walkcycle-test-07ac452d75cc47969234b224422ea85d
title: Sci-fi Girl v.02 Walkcycle Test
*/

import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useFrame, useThree } from 'react-three-fiber'
import { useGLTF } from '@react-three/drei/useGLTF'
import { useAnimations } from '@react-three/drei/useAnimations'
import {useMidiAction} from './Midi'
import {hslToHex} from './util/hslToHex'
import {Stars} from 'drei'

export default function Model(props) {
  const group = useRef()
  const stars = useRef()
  const color = useRef(hslToHex((new Date()%360),100,50));
  const { nodes, materials, animations } = useGLTF('/assets/scifi/scene.gltf')
  const { actions } = useAnimations(animations, group)
  console.log(actions)
  const {camera} = useThree();
  useEffect(()=>{
    Object.keys(materials).forEach(mat => {
      if(mat !== "cloth_mat")
        materials[mat].wireframe = true;
      else
        materials[mat].opacity=0.95;
    })
    actions[Object.keys(actions)[0]]?.play();
  })
  useMidiAction({type:8,subtype:8,note: 40},()=>{
    const col = new THREE.Color(hslToHex((new Date()/10%360),100,50));
    materials.cloth_mat.color.r = col.r;
    materials.cloth_mat.color.g = col.g;
    materials.cloth_mat.color.b = col.b;
  })
  useMidiAction({type:8,subtype:8,note: 36},()=>{
    // camera.position.z = group.current.position.z+25;
    const col = new THREE.Color(hslToHex((45-(new Date()/10)%360),100,50));
    materials.body_mat.color.r = col.r;
    materials.body_mat.color.g = col.g;
    materials.body_mat.color.b = col.b;
  })
  useMidiAction({type:8,subtype:8,note: 41},()=>{
    const col = new THREE.Color(hslToHex((90-(new Date()/10)%360),100,50));
    materials.hair_outer_mat.color.r = col.r;
    materials.hair_outer_mat.color.g = col.g;
    materials.hair_outer_mat.color.b = col.b;
    const col2 = new THREE.Color(hslToHex((120-(new Date()/10)%360),100,50));
    materials.hair_inner_mat.color.r = col2.r;
    materials.hair_inner_mat.color.g = col2.g;
    materials.hair_inner_mat.color.b = col2.b;
  })
  useFrame((state,delta)=>{
    // console.log(state);
    const {camera} = state;
    // console.log();
    if(actions[Object.keys(actions)[0]]?.time <1.2916666269302368){
      actions[Object.keys(actions)[0]]?.getMixer().setTime(1.2916666269302369);
    }
    if(group?.current){
      const target = new THREE.Vector3(group.current.position.x, group.current.position.y+13,group.current.position.z)
      camera.controls.target = target;
      group.current.position.z +=0.1;

      const pos = new THREE.Vector3(group.current.position.x,group.current.position.y+10,group.current.position.z);
      camera.lookAt(pos)
      // console.log(camera);
      // console.log(group.current);
      // console.log(nodes.modelteeth_upper_body_mat_0.geometry);
      // console.log(materials.cloth_mat);
      // console.log(group.current.children[0].children[0])
      // console.log(window.audioAnalyzerData.dataArray)

      //  dataArray[512] / 128.0,dataArray[768] / 128.0);
    }
    if(stars?.current){
      stars.current.position.y = 3*Math.sin(new Date()/6000);
    }
  })
  return (
    <group ref={group} {...props} dispose={null} >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            name="0"
            material={materials.cloth_mat}
            geometry={nodes['0'].geometry}
            morphTargetDictionary={nodes['0'].morphTargetDictionary}
            material-color={color?.current}
            morphTargetInfluences={nodes['0'].morphTargetInfluences}
          />
          <primitive object={nodes._rootJoint} />
          <skinnedMesh
            material={materials.body_mat}
            geometry={nodes.modelbody_body_mat_0.geometry}
            skeleton={nodes.modelbody_body_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.body_mat}
            geometry={nodes.modelteeth_upper_body_mat_0.geometry}
            skeleton={nodes.modelteeth_upper_body_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.body_mat}
            geometry={nodes.modelteeth_lower_body_mat_0.geometry}
            skeleton={nodes.modelteeth_lower_body_mat_0.skeleton}
          />
          <skinnedMesh
          wireframe={true}
            material={materials.body_mat}
            geometry={nodes.modeltongue_body_mat_0.geometry}
            skeleton={nodes.modeltongue_body_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.eyes_outer_mat}
            geometry={nodes.modeleyes_R_outer_eyes_outer_mat_0.geometry}
            skeleton={nodes.modeleyes_R_outer_eyes_outer_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.eyes_inner_mat}
            geometry={nodes.modeleyes_R_inner_eyes_inner_mat_0.geometry}
            skeleton={nodes.modeleyes_R_inner_eyes_inner_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.eyes_outer_mat}
            geometry={nodes.modeleyes_L_outer_eyes_outer_mat_0.geometry}
            skeleton={nodes.modeleyes_L_outer_eyes_outer_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.eyes_inner_mat}
            geometry={nodes.modeleyes_L_inner_eyes_inner_mat_0.geometry}
            skeleton={nodes.modeleyes_L_inner_eyes_inner_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.tear_mat}
            geometry={nodes.modeltear_L_tear_mat_0.geometry}
            skeleton={nodes.modeltear_L_tear_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.tear_mat}
            geometry={nodes.modeltear_R_tear_mat_0.geometry}
            skeleton={nodes.modeltear_R_tear_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.hair_outer_mat}
            geometry={nodes.modelhair_outer_hair_outer_mat_0.geometry}
            skeleton={nodes.modelhair_outer_hair_outer_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.hair_inner_mat}
            geometry={nodes.modelhair_inner_hair_inner_mat_0.geometry}
            skeleton={nodes.modelhair_inner_hair_inner_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.eyelash_mat}
            geometry={nodes.modeleyelash_L_upper_eyelash_mat_0.geometry}
            skeleton={nodes.modeleyelash_L_upper_eyelash_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.eyelash_mat}
            geometry={nodes.modeleyelash_L_lower_eyelash_mat_0.geometry}
            skeleton={nodes.modeleyelash_L_lower_eyelash_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.eyelash_mat}
            geometry={nodes.modeleyelash_R_upper_eyelash_mat_0.geometry}
            skeleton={nodes.modeleyelash_R_upper_eyelash_mat_0.skeleton}
          />
          <skinnedMesh
            material={materials.eyelash_mat}
            geometry={nodes.modeleyelash_R_lower_eyelash_mat_0.geometry}
            skeleton={nodes.modeleyelash_R_lower_eyelash_mat_0.skeleton}
          />
        </group>
      </group>
      <group ref={stars}>
      <Stars
            radius={20} // Radius of the inner sphere (default=100)
            depth={25} // Depth of area where stars should fit (default=50)
            count={8000} // Amount of stars (default=5000)
            factor={2} // Size factor (default=4)
            saturation={0.5} // Saturation 0-1 (default=0)
            fade // Faded dots (default=false)
          />
    </group>
    </group>
  )
}


